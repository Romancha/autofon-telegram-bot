package org.romancha.autofon.commons

import dev.inmo.tgbotapi.bot.TelegramBot
import dev.inmo.tgbotapi.extensions.api.send.sendMessage
import dev.inmo.tgbotapi.extensions.utils.types.buttons.replyKeyboard
import dev.inmo.tgbotapi.extensions.utils.types.buttons.simpleButton
import dev.inmo.tgbotapi.types.ChatId
import dev.inmo.tgbotapi.types.ChatIdentifier
import dev.inmo.tgbotapi.types.buttons.KeyboardMarkup
import dev.inmo.tgbotapi.utils.row
import org.romancha.autofon.BotProps
import org.romancha.autofon.service.LastStatesManager

abstract class Message(
    private val message: suspend () -> String,
    private val replyMarkup: KeyboardMarkup? = null,
    private val silent: Boolean = false
) {

    suspend fun send(bot: TelegramBot, chatId: ChatIdentifier = ChatId(BotProps.chaId)) {
        bot.sendMessage(
            chatId = chatId,
            text = message(),
            replyMarkup = replyMarkup,
            disableNotification = silent
        )
    }

}

object StartMessage : Message(
    message = {
        """
        üññ –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç AutoFon.
        –Ø —Å–ª–µ–∂—É –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≤–∞—à–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ üöó –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
        –ê –µ—â–µ —è —É–º–µ—é —Ä–∏—Å–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏ üìà –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –æ –º–∞–ª–µ–Ω—å–∫–æ–º –±–∞–ª–∞–Ω—Å–µ üíµ –Ω–∞ sim-–∫–∞—Ä—Ç–µ.
        
        –Ø open source –∏ self-hosted, –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ: https://github.com/Romancha/autofon-telegram-bot
        """.trimIndent()
    },
    replyMarkup = replyKeyboard(resizeKeyboard = true, oneTimeKeyboard = false) {
        mainMenu()
    }
)

object BackMessage : Message(
    message = {
        "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
    },
    replyMarkup = replyKeyboard(resizeKeyboard = true, oneTimeKeyboard = false) {
        mainMenu()
    }
)

object SubscribeSettingsMessage : Message(
    message = {
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"
    },
    replyMarkup = replyKeyboard(resizeKeyboard = true, oneTimeKeyboard = false) {
        row {
            simpleButton(Actions.BACK.title)
        }
    }
)

object HeartbeatMessage : Message(
    message = {
        "–Ø –∂–∏–≤!"
    },
    silent = true
)

object VehicleStateDataSummaryMessage : Message(
    message = {
        val allStates = LastStatesManager.getAllStates()
        val statesSummary = if (allStates.isNotEmpty()) {
            allStates.map {
                it.key.name + ": " + it.value.size
            }.joinToString("\n")
        } else {
            "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        }

        "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ  —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º:\n$statesSummary"
    }
)